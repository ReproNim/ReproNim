# emacs: -*- mode: python; py-indent-offset: 4; tab-width: 4; indent-tabs-mode: nil -*-
# ex: set sts=4 ts=4 sw=4 noet:
# ## ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##
#
#   See COPYING file distributed along with the repronim package for the
#   copyright and license terms.
#
# ## ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##
"""Class to manage container engines in which the environments are created."""

from importlib import import_module
import abc
import logging

class Container(object):
    """
    Base class for installing and managing container engines.
    """

    __metaclass__ = abc.ABCMeta

    def __init__(self, distribution, config):
        """
        Class constructor
        :param distribution: Instance of Distribution sub-class.
        :param config: Container engine configuration dictionary.
        """
        self.distribution = distribution
        self.config = config
        self.lgr = logging.getLogger('repronim.container')

    @staticmethod
    def factory(container_engine, distribution, config = None):
        """
        Factory method for creating the appropriate Container sub-class.
        :param distribution: Instance of a Distribution sub-class object.
        :param config: Dictionary of config settings for the container engine.
        :return: Instance of the requested Container sub-class.
        """
        class_name = container_engine.capitalize() + 'Container'
        module = import_module('repronim.container.' + container_engine)
        return getattr(module, class_name)(distribution, config)

    @abc.abstractmethod
    def create(self):
        """
        Create a baseline Docker image and run it to create the container.
        :return: Tuple containing the image ID and container ID.
        """
        return

    # @abc.abstractmethod
    # def list(self):
    #     """List the available containers"""
    #     return
    #
    # @abc.abstractmethod
    # def list_images(self):
    #     """List the available images"""
    #     return

    @abc.abstractmethod
    def execute_command(self, container_id, command):
        """
        Execute the given command in the container.
        :param container_id: ID of container
        :param command: Command to run in the container shell. String or list.
        :return: List of stdout generated by the command.
        """
        return

    @abc.abstractmethod
    def install_packages(self, container_id):
        """
        Installs the packages identified in the provenance in the container environment.
        :param container_id: ID of the container.
        :return: None
        """
        return

# emacs: -*- mode: python; py-indent-offset: 4; tab-width: 4; indent-tabs-mode: nil -*-
# ex: set sts=4 ts=4 sw=4 noet:
# ## ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##
#
#   See COPYING file distributed along with the repronim package for the
#   copyright and license terms.
#
# ## ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##
"""Container sub-class to provide management of container engine."""

from io import BytesIO
import docker
import json

from repronim.container.base import Container


class DockerengineContainer(Container):
    """
    Container manager which talks to a Docker engine.
    """

    def __init__(self, distribution, config = None):
        """
        Class constructor
        :param distribution: Instance of Distribution sub-class.
        :param config: Container engine configuration dictionary.
        """

        # Set default configuration parameters for Docker engine.
        if not 'engine_url' in config:
            config['engine_url'] = 'unix:///var/run/docker.sock'
        if not 'stdin_open' in config:
            config['stdin_open'] = True

        super(DockerengineContainer, self).__init__(distribution, config)

        # Initialize the client connection to Docker engine.
        self.client = docker.Client(base_url=config['engine_url'])

    def create(self):
        """
        Create a baseline Docker image and run it to create the container.
        :return: Tuple containing the image ID and container ID.
        """
        dockerfile = self.get_base_image_dockerfile()
        image_id = self.build_image(dockerfile)
        container_id = self.run_container(image_id)
        return (image_id, container_id)

    # def list(self):
    #     pass
    #
    # def list_images(self):
    #     pass

    def execute_command(self, container_id, command):
        """
        Execute the given command in the container.
        :param container_id: ID of Docker container
        :param command: Command to run in the container shell. String or list.
        :return: List of stdout generated by the command.
        """
        execute = self.client.exec_create(container=container_id, cmd=command)
        response = [line for line in self.client.exec_start(exec_id=execute['Id'], stream=True)]
        return response

    def install_packages(self, container_id):
        """
        Installs the packages identified in the provenance in the container environment.
        :param container_id: ID of the Docker container.
        :return: None
        """
        for command in self.distribution.get_install_package_commands():
            response = self.execute_command(container_id, command)
            self.lgr.debug(response)

    def get_base_image_dockerfile(self):
        """
        Creates the Dockerfile needed to create the baseline Docker image.
        :return: String containing the Dockerfile commands.
        """
        name = self.distribution.get_name()
        version = self.distribution.get_version()
        dockerfile = 'FROM %s:%s\n' % (name, version)
        dockerfile += 'MAINTAINER staff@repronim.org\n'
        return dockerfile

    def build_image(self, dockerfile):
        """
        Create the Docker image in the Docker engine.
        :param dockerfile: Contents of the Dockerfile that describes the image.
        :return: Docker image ID
        """
        f = BytesIO(dockerfile.encode('utf-8'))
        response = [json.loads(line) for line in self.client.build(fileobj=f, rm=True)]
        self.lgr.debug(response)
        if 'error' in response[-1]:
            raise Exception("Docker error - %s" % response[-1]['error'])
            # TODO: Need to figure out how to remove lingering container image from engine.

        # Retrieve image_id from last result string which is in the
        # form of: u'Successfully built 73ccd6b8d194\n'
        image_id = response[-1]['stream'].split(' ')[2][:-1]
        return image_id

    def run_container(self, image_id):
        """
        Start the Docker container from the given image ID.
        :param image_id: Docker image ID
        :return: ID of created Docker container.
        """
        container = self.client.create_container(image=image_id,
            stdin_open=self.config['stdin_open'])
        self.client.start(container)
        self.lgr.debug(self.client.logs(container))
        return container['Id']

    def remove_container(self, container_id):
        """
        Deletes a container from the Docker engine.
        :param container_id: ID of container to delete.
        :return: None
        """
        self.client.remove_container(container_id)

    def remove_image(self, image_id):
        """
        Deletes an image from the Docker engine.
        :param image_id: ID of image to delete.
        :return: None
        """
        self.client.remove_container(image_id)
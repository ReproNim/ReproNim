# emacs: -*- mode: python; py-indent-offset: 4; tab-width: 4; indent-tabs-mode: nil -*-
# ex: set sts=4 ts=4 sw=4 noet:
# ## ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##
#
#   See COPYING file distributed along with the niceman package for the
#   copyright and license terms.
#
# ## ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##

import os
import pytest
import tempfile
from .constants import NICEMAN_CFG_PATH
from niceman.cmd import Runner
from niceman.tests.utils import skip_if_no_network

# Substitutes in for user's ~/.config/niceman.cfg file
CONFIGURATION = [
    NICEMAN_CFG_PATH
]

@pytest.fixture(params=CONFIGURATION)
def niceman_cfg_path(request):
    yield request.param



@pytest.fixture(scope="module")
def temp_file():
    """Provide an empty temporary file for a test.

    The fixture will create a temp file and remove it when the test is complete.
    To add content to the temporary file, call the object in the test function
    with the content passed as the first argument of the call.

    e.g. tmp_file("my content")

    Returns
    -------
    FixtureTempFile object
    """
    class FixtureTempFile:
        def __init__(self, fid, path):
            self.fid = fid
            self.path = path
        def __call__(self, content):
            if content:
                file = open(self.path, "w")
                file.write(content)
                file.close()
        def __repr__(self):
            return self.path

    fid, path = tempfile.mkstemp()
    temp_file = FixtureTempFile(fid, path)
    yield temp_file
    os.remove(path)


def get_docker_fixture(image, portmaps={}, name=None,
                       custom_params={}, scope='function'):
    """Produce a fixture which starts/stops a docker container

    It should be called to produce and assign within the scope under some name,
    e.g.::

        setup_ssh = get_docker_fixture(
            scope='module',
            image='rastasheep/ubuntu-sshd:14.04',
            portmaps={
                49000: 22
            }
        )

    to create a `setup_ssh` fixture which would start docker image with port
    mapping having a scope of the module (so starts and stops once, not per each
    test within the module)

    Parameters
    ----------
    image: str
      Docker image to run
    portmaps: dict, optional
      Port mappings (host:container)
    name: str, optional
      Container name
    custom_params: whatever, optional
      What to return in a fixture information in the field 'custom'
    scope: {'function', 'class', 'module', 'session'}, optional
      A scope for the fixture according to `pytest.fixture` docs
    """

    @pytest.fixture(scope=scope)
    def docker_fixture():
        """The actual fixture code generated by get_docker_fixture

        on setup, this fixture ensures that a docker container is running
        and starts one if necessary.

        Fixture yields parameters of the container with a `custom` field passed
        into the `get_docker_container`.

        on teardown, this fixture stops the docker container it started
        """

        skip_if_no_network()
        args = ['docker',
                'run',
                '-d',
                '--rm',
                ]
        params = {}
        if name:
            args += ['--name', name]
            params['name'] = name

        if portmaps:
            for from_to in portmaps.items():
                args += ['-p', '%d:%d' % from_to]
                params['port'] = from_to[0]
        args += [image]
        stdout, _ = Runner().run(args)
        params['container_id'] = container_id = stdout.strip( )
        params['custom'] = custom_params
        yield params
        Runner().run(['docker', 'rm', '--force', container_id])

    return docker_fixture
